

In C#, binary trees can be implemented using classes and objects, 
and the binary search tree property allows us to perform efficient operations 
such as searching and sorting. Binary trees have many use cases and applications
, including storing and organizing data, sorting,
Huffman coding, and expression evaluation.


























internal working of Hashmap

Key is unique


Insert O(1)
search O(1)
Delete O(1)


hashing 
________

hashing willprovide same output for same input but 
also for diffrent input their is same output that called collision .

h(i) - > Output 
h(i)- > Output 

hash function:

map larger value to smaller value.
sholud be O(1) or O(len) for string keys.
should uniformaly distribute large keys into hash table sloats.

Hash table:
hash table is nothing but the nodes of array i  which all the value obtatined by the hash function is used to store the value of the given variable 
that going to be stored in the hash table based on the output generated by the hash function 

like 

hash(key)= key/7

keys={24,16,17,18,10,9}
0 |    |
1 | 16   | ->|  9 |
2 |  24  | -> | 17 | -> |  10|
3 |  18  |
4 |  12  |
5 |    |

-------------
key:24
val:some val
hash: 3
next: 17 
________________

so here we seach  for getting val their is we have to traverse to all the node if len is more then that time the operation takes time of )(1+len)
thats way in java 8 the concept of the the linkedlist is removed by self balancing binary tree that more efficient and the s earch will be not linearly to the length
log(len) 




